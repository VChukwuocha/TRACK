<!DOCTYPE html>
<html>
<head>
	<title> Create New Goal </title>
  <%- include("../partials/head.ejs")%>
</head>

<style>
/* Style the form */
#regForm {
	background-color: white;
	color: black;
	margin: 100px auto;
	padding: 40px;
	width: 70%;
	min-width: 300px;
}
p {
	margin: 10px;
}

.form-modified-control {
  display: block;
  /*align-items: center;*/
  /*width: 500px;*/
  height: calc(2.15625rem + 2px);
  padding: 0.375rem 0.75rem;
  font-family: "Lato", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 0.9375rem;
  font-weight: 400;
  line-height: 1.5;
  color: #7b8a8b;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  -webkit-transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;
  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;
}

/* Style the input fields */
input {
	padding: 10px;
	width: 100%;
	font-size: 17px;
	font-family: Raleway;
	border: 1px solid #aaaaaa;
}

textarea {
	padding: 10px;
	width: 100%;
	font-size: 17px;
	font-family: Raleway;
	border: 1px solid #aaaaaa;
}

/* Mark input boxes that gets an error on validation: */
input.invalid {
	background-color: #ffdddd;
}

/* Hide all steps by default: */
.tab {
	display: none;
}

/* Make circles that indicate the steps of the form: */
.step {
	height: 15px;
	width: 15px;
	margin: 0 2px;
	background-color: #bbbbbb;
	border: none;
	border-radius: 50%;
	display: inline-block;
	opacity: 0.5;
}

/* Mark the active step: */
.step.active {
	opacity: 1;
}

/* Mark the steps that are finished and valid: */
.step.finish {
	background-color: #4CAF50;
}

.test {

}

#topBtn {
display: none;
position: fixed;
bottom: 20px;
left: 30px;
z-index: 99;
font-size: 15px;
border: none;
outline: none;
background-color: #2C3E50;
color: white;
cursor: pointer;
padding: 15px;
border-radius: 4px;
}

#topBtn:hover {
  background-color: #555;
}

</style>

<button onclick="topFunction()" id="topBtn" title="Go to top">Back to Top</button>
<script>
//Get the button
var mybutton = document.getElementById("topBtn");

// When the user scrolls down 20px from the top of the document, show the button
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    mybutton.style.display = "block";
  } else {
    mybutton.style.display = "none";
  }
}

// When the user clicks on the button, scroll to the top of the document
function topFunction() {
  document.body.scrollTop = 0;
  document.documentElement.scrollTop = 0;
}
</script>

<div class="grid-container">

<%- include("../partials/header.ejs")%>

	<main class="main">
		<script>
        const currentTheme = localStorage.getItem('theme');
        if (currentTheme) {
          document.documentElement.setAttribute('data-theme', currentTheme);
          localStorage.setItem('theme', currentTheme);
        }
    	</script> 
    	
			<div class =  class-header>
		            <h3>Create Goal</h3>
		    </div>

		<form id="regForm" action="/student/<%= student.id%>/goal/create" method="post" style="margin-top:0">

			<!-- One "tab" for each step in the form: -->

			<!---Goal Title and Descriptoin-->
			<div>
				<h3>Create New Goal:</h3>
				<p><input placeholder="Goal Title..."  class="form-modified-control"  type="text" name="name" id="name"></p>
				<p><textarea style="height: 100px" type="textarea" placeholder="Goal Description..." class="form-modified-control" name="description" id="description"></textarea></p>
			</div>
	<!-- One "tab" for each step in the form: -->

			<!---Start and End Date-->
			<div><br>
				<h3>Dates</h3>
				<p>Start Date:<input placeholder="Start Date..." class="form-modified-control" type="date" name="startDate" id="startDate"></p>
				<p>End Date:<input placeholder="End Date..." class="form-modified-control" type="date" name="endDate" id="endDate"></p>
			</div>

			<!--Goal Type -->

				<div><br>
					<h3>Goal Types</h3>
					<!--<input type="radio" style="width: auto" name="goalType" class="custom-control-input" value="academic" checked> Academic <br>-->

					<div class="custom-control custom-radio">
						<input type="radio" id="customRadio2" name="goalType" class="custom-control-input" value="Academic Goal" checked="true">
      					<label class="custom-control-label" for="customRadio2">Academic</label>
					</div>
					<!--<input type="radio" style="width: auto" name="goalType" id="customRadio2" value="behavioral"> Behavioral <br>-->

					<div class="custom-control custom-radio">
						<input type="radio" id="customRadio3" name="goalType" class="custom-control-input" value="Behavioral Goal">
      					<label class="custom-control-label" for="customRadio3">Behavior</label>
      				</div>
				</div>

			<!--Goal Collection Type -->
			<div><br>
				<h3>Method of Collection:</h3>

				<input type="checkbox" style="width: auto" name="methodOfCollection" value="score" id="score"> Score <br>

				<input type="checkbox" style="width: auto" name="methodOfCollection" value="count" id="count"> Count of Occurrences<br>

				<select class="form-control" name = "occurrences" style="width:100%">
            		<option value="Per hour">Per hour</option>
            		<option value="Per class">Per class</option>
            		<option value="Per day">Per day</option>
            		<option value="Per week">Per week</option>
          		</select>

				<input type="checkbox" style="width: auto" name="methodOfCollection" value="rubric" id="rubric" onclick="rubricVisibility()"> Rubric <br>
					<p>Descriptions for Not Evident: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rnotevident" id="Rnotevident"></textarea></p>
					<p>Descriptions for Introduced:<textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rintroduced" id="Rintroduced"></textarea></p>
					<p>Descriptions for Emerging: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Remerging" id="Remerging"></textarea></p>
					<p>Descriptions for Developing: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rdeveloping" id="Rdeveloping"></textarea></p>
					<p>Descriptions for Ongoing: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rongoing" id="Rongoing"></textarea></p>
					<p>Descriptions for Demonstrated: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rdemonstrated" id="Rdemonstrated"></textarea></p>
					<p>Descriptions for Applied: <textarea style="height: 60px" type="textarea" class="form-modified-control" name="Rapplied" id="Rapplied"></textarea></p>

				<!--<div style="display: none" id="rubricDiv">
						<div id = "rubricFieldsHolder">
							<p><input placeholder="Rubric Field" type="text" name="rubricField"></p>
						</div>

						<p><input type="button" value="Add more" onclick="addRubricField()"></input></p>
						<p><input type="button" value="Delete One" onclick="deleteRubricField()"></input></p>
				</div>-->




					<!--<input type="checkbox" style="width: auto" name="methodOfCollection" value="comments" id="comments"> Comments <br>-->

					<input type="checkbox" style="width: auto" name="methodOfCollection" value="comments" id="comments"> Descriptive Comments <br>

					<input type="checkbox" style="width: auto" name="methodOfCollection" value="documentation" id="documentation"> File/Image documentation <br>


					<script>
						function addRubricField() {
							var rubricHolder = document.createElement("p");
							var rubricField = document.createElement("input");        // Create a <input> element
							rubricField.placeholder = "Rubric Field";
							rubricField.type = "text";
							rubricField.name = "rubricField";
							rubricHolder.appendChild(rubricField);
							//var n = rubricFieldsHolder.childNodes.length - 6;
							//console.log(rubricFieldsHolder.childNodes);
							//console.log(n);
							document.getElementById("rubricFieldsHolder").insertBefore(rubricHolder, rubricFieldsHolder.childNodes[-1]);      // Append <input> to <body>
						}

						function deleteRubricField() {
							var n = rubricFieldsHolder.childNodes.length - 1;
							console.log(rubricFieldsHolder.childNodes);
							console.log(rubricFieldsHolder.children[n]);
							console.log(n);
							rubricFields = document.getElementById("rubricFieldsHolder");
							document.getElementById("rubricFieldsHolder").childNodes[n].remove();
							//rubricFields.children[n-4].remove();
						}

						function rubricVisibility() {
							// Get the checkbox
							var checkBox = document.getElementById("rubric");
							// Get the output text
							var rubricDiv = document.getElementById("rubricDiv");

							// If the checkbox is checked, display the output text
							if (checkBox.checked == true){
								rubricDiv.style.display = "block";
							} else {
								rubricDiv.style.display = "none";
							}
						}
					</script>
			</div>

			<div>
				<p><strong>WARNING: you can ONLY change the Method of Collection you have selected in the future.</p></strong>
				<p>Please double check before you submit.</p>
			</div>

			<div style="overflow:auto;">
				<div style="float:right;">
					<button type="submit"  class="btn btn-primary" id="nextBtn" >Submit</button>
					<a href="/student/<%=student.id%>" class="btn btn-info">Cancel</a>
				</div>
			</div>
		</form>
	</main>


 <footer class="footer">
      <div class="footer__copyright">&copy; 2019 TRACK</div>
  </footer>

</div>

</html>

<script>

function validateForm() {
	// This function deals with validation of the form fields
  	var x, y, i, valid = true;
  	x = document.getElementsByClassName("tab");
  	y = x[currentTab].getElementsByTagName("input");
  	// A loop that checks every input field in the current tab:
  	for (i = 0; i < y.length; i++) {
  		console.log("y[i].value: " + y[i].value);
    	// If a field is empty...
	    if (y[i].value == "") {
	      	//check to see if this is the rubric field bc it is okay to leave rubric field empty as long as the checkbox is unchecked
	      	console.log("I am an empty field");
	      	if ((y[i].name == "rubricField" || y[i].type == "button")) {
	      		console.log("and a rubric field");
	      		if (document.getElementById("rubric").checked == true) {
					// add an "invalid" class to the field:
					y[i].className += " invalid";
					console.log(y[i].className);
					// and set the current valid status to false:
					valid = false;
	      		}
	  		} else if (x[currentTab].id == "preview") {
	  			console.log("and a preview page");
	  			//we good
	  		} else {
				// add an "invalid" class to the field:
				console.log("and im being marked as invalid");
		   		y[i].className += " invalid";
		   		console.log(y[i].className);
		      	// and set the current valid status to false:
		      	valid = false;
			}
		}
	}
	// If the valid status is true, mark the step as finished and valid:
	if (valid) {
		document.getElementsByClassName("step")[currentTab].className += " finish";
	}
	console.log("I am value? " + valid);
	return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
  	x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class to the current step:
  x[n].className += " active";
}
</script>
